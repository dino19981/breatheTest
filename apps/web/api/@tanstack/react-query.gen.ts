// This file is auto-generated by @hey-api/openapi-ts

import { type Options, getHealthV1, getAchievements, getDocuments, getPremiums, createUserProfile, deleteUserProfile, getUserProfile, patchUserProfile, resetUserProgress, getUserAchievements, getUserPersonalBestResults, getUserPremiums, getSessions, postSession, getSignedDocuments } from '../sdk.gen';
import { queryOptions, infiniteQueryOptions, type InfiniteData, type UseMutationOptions } from '@tanstack/react-query';
import type { GetHealthV1Data, GetAchievementsData, GetAchievementsError, GetAchievementsResponse, GetDocumentsData, GetDocumentsError, GetDocumentsResponse, GetPremiumsData, GetPremiumsError, GetPremiumsResponse, CreateUserProfileData, CreateUserProfileError, CreateUserProfileResponse, DeleteUserProfileData, DeleteUserProfileError, DeleteUserProfileResponse, GetUserProfileData, PatchUserProfileData, PatchUserProfileError, PatchUserProfileResponse, ResetUserProgressData, ResetUserProgressError, ResetUserProgressResponse, GetUserAchievementsData, GetUserAchievementsError, GetUserAchievementsResponse, GetUserPersonalBestResultsData, GetUserPremiumsData, GetUserPremiumsError, GetUserPremiumsResponse, GetSessionsData, GetSessionsError, GetSessionsResponse, PostSessionData, PostSessionError, GetSignedDocumentsData, GetSignedDocumentsError, GetSignedDocumentsResponse } from '../types.gen';
import { client as _heyApiClient } from '../client.gen';

export type QueryKey<TOptions extends Options> = [
    Pick<TOptions, 'baseUrl' | 'body' | 'headers' | 'path' | 'query'> & {
        _id: string;
        _infinite?: boolean;
    }
];

const createQueryKey = <TOptions extends Options>(id: string, options?: TOptions, infinite?: boolean): [
    QueryKey<TOptions>[0]
] => {
    const params: QueryKey<TOptions>[0] = { _id: id, baseUrl: (options?.client ?? _heyApiClient).getConfig().baseUrl } as QueryKey<TOptions>[0];
    if (infinite) {
        params._infinite = infinite;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query;
    }
    return [
        params
    ];
};

export const getHealthV1QueryKey = (options?: Options<GetHealthV1Data>) => createQueryKey('getHealthV1', options);

export const getHealthV1Options = (options?: Options<GetHealthV1Data>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getHealthV1({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getHealthV1QueryKey(options)
    });
};

export const getAchievementsQueryKey = (options?: Options<GetAchievementsData>) => createQueryKey('getAchievements', options);

export const getAchievementsOptions = (options?: Options<GetAchievementsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getAchievements({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getAchievementsQueryKey(options)
    });
};

const createInfiniteParams = <K extends Pick<QueryKey<Options>[0], 'body' | 'headers' | 'path' | 'query'>>(queryKey: QueryKey<Options>, page: K) => {
    const params = queryKey[0];
    if (page.body) {
        params.body = {
            ...queryKey[0].body as any,
            ...page.body as any
        };
    }
    if (page.headers) {
        params.headers = {
            ...queryKey[0].headers,
            ...page.headers
        };
    }
    if (page.path) {
        params.path = {
            ...queryKey[0].path as any,
            ...page.path as any
        };
    }
    if (page.query) {
        params.query = {
            ...queryKey[0].query as any,
            ...page.query as any
        };
    }
    return params as unknown as typeof page;
};

export const getAchievementsInfiniteQueryKey = (options?: Options<GetAchievementsData>): QueryKey<Options<GetAchievementsData>> => createQueryKey('getAchievements', options, true);

export const getAchievementsInfiniteOptions = (options?: Options<GetAchievementsData>) => {
    return infiniteQueryOptions<GetAchievementsResponse, GetAchievementsError, InfiniteData<GetAchievementsResponse>, QueryKey<Options<GetAchievementsData>>, number | Pick<QueryKey<Options<GetAchievementsData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<GetAchievementsData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    page: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await getAchievements({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getAchievementsInfiniteQueryKey(options)
    });
};

export const getDocumentsQueryKey = (options?: Options<GetDocumentsData>) => createQueryKey('getDocuments', options);

export const getDocumentsOptions = (options?: Options<GetDocumentsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getDocuments({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getDocumentsQueryKey(options)
    });
};

export const getDocumentsInfiniteQueryKey = (options?: Options<GetDocumentsData>): QueryKey<Options<GetDocumentsData>> => createQueryKey('getDocuments', options, true);

export const getDocumentsInfiniteOptions = (options?: Options<GetDocumentsData>) => {
    return infiniteQueryOptions<GetDocumentsResponse, GetDocumentsError, InfiniteData<GetDocumentsResponse>, QueryKey<Options<GetDocumentsData>>, number | Pick<QueryKey<Options<GetDocumentsData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<GetDocumentsData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    page: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await getDocuments({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getDocumentsInfiniteQueryKey(options)
    });
};

export const getPremiumsQueryKey = (options?: Options<GetPremiumsData>) => createQueryKey('getPremiums', options);

export const getPremiumsOptions = (options?: Options<GetPremiumsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getPremiums({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getPremiumsQueryKey(options)
    });
};

export const getPremiumsInfiniteQueryKey = (options?: Options<GetPremiumsData>): QueryKey<Options<GetPremiumsData>> => createQueryKey('getPremiums', options, true);

export const getPremiumsInfiniteOptions = (options?: Options<GetPremiumsData>) => {
    return infiniteQueryOptions<GetPremiumsResponse, GetPremiumsError, InfiniteData<GetPremiumsResponse>, QueryKey<Options<GetPremiumsData>>, number | Pick<QueryKey<Options<GetPremiumsData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<GetPremiumsData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    page: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await getPremiums({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getPremiumsInfiniteQueryKey(options)
    });
};

export const createUserProfileQueryKey = (options: Options<CreateUserProfileData>) => createQueryKey('createUserProfile', options);

export const createUserProfileOptions = (options: Options<CreateUserProfileData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await createUserProfile({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: createUserProfileQueryKey(options)
    });
};

export const createUserProfileMutation = (options?: Partial<Options<CreateUserProfileData>>): UseMutationOptions<CreateUserProfileResponse, CreateUserProfileError, Options<CreateUserProfileData>> => {
    const mutationOptions: UseMutationOptions<CreateUserProfileResponse, CreateUserProfileError, Options<CreateUserProfileData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await createUserProfile({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const deleteUserProfileMutation = (options?: Partial<Options<DeleteUserProfileData>>): UseMutationOptions<DeleteUserProfileResponse, DeleteUserProfileError, Options<DeleteUserProfileData>> => {
    const mutationOptions: UseMutationOptions<DeleteUserProfileResponse, DeleteUserProfileError, Options<DeleteUserProfileData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteUserProfile({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getUserProfileQueryKey = (options: Options<GetUserProfileData>) => createQueryKey('getUserProfile', options);

export const getUserProfileOptions = (options: Options<GetUserProfileData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getUserProfile({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getUserProfileQueryKey(options)
    });
};

export const patchUserProfileMutation = (options?: Partial<Options<PatchUserProfileData>>): UseMutationOptions<PatchUserProfileResponse, PatchUserProfileError, Options<PatchUserProfileData>> => {
    const mutationOptions: UseMutationOptions<PatchUserProfileResponse, PatchUserProfileError, Options<PatchUserProfileData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await patchUserProfile({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const resetUserProgressMutation = (options?: Partial<Options<ResetUserProgressData>>): UseMutationOptions<ResetUserProgressResponse, ResetUserProgressError, Options<ResetUserProgressData>> => {
    const mutationOptions: UseMutationOptions<ResetUserProgressResponse, ResetUserProgressError, Options<ResetUserProgressData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await resetUserProgress({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getUserAchievementsQueryKey = (options: Options<GetUserAchievementsData>) => createQueryKey('getUserAchievements', options);

export const getUserAchievementsOptions = (options: Options<GetUserAchievementsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getUserAchievements({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getUserAchievementsQueryKey(options)
    });
};

export const getUserAchievementsInfiniteQueryKey = (options: Options<GetUserAchievementsData>): QueryKey<Options<GetUserAchievementsData>> => createQueryKey('getUserAchievements', options, true);

export const getUserAchievementsInfiniteOptions = (options: Options<GetUserAchievementsData>) => {
    return infiniteQueryOptions<GetUserAchievementsResponse, GetUserAchievementsError, InfiniteData<GetUserAchievementsResponse>, QueryKey<Options<GetUserAchievementsData>>, number | Pick<QueryKey<Options<GetUserAchievementsData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<GetUserAchievementsData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    page: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await getUserAchievements({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getUserAchievementsInfiniteQueryKey(options)
    });
};

export const getUserPersonalBestResultsQueryKey = (options: Options<GetUserPersonalBestResultsData>) => createQueryKey('getUserPersonalBestResults', options);

export const getUserPersonalBestResultsOptions = (options: Options<GetUserPersonalBestResultsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getUserPersonalBestResults({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getUserPersonalBestResultsQueryKey(options)
    });
};

export const getUserPremiumsQueryKey = (options: Options<GetUserPremiumsData>) => createQueryKey('getUserPremiums', options);

export const getUserPremiumsOptions = (options: Options<GetUserPremiumsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getUserPremiums({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getUserPremiumsQueryKey(options)
    });
};

export const getUserPremiumsInfiniteQueryKey = (options: Options<GetUserPremiumsData>): QueryKey<Options<GetUserPremiumsData>> => createQueryKey('getUserPremiums', options, true);

export const getUserPremiumsInfiniteOptions = (options: Options<GetUserPremiumsData>) => {
    return infiniteQueryOptions<GetUserPremiumsResponse, GetUserPremiumsError, InfiniteData<GetUserPremiumsResponse>, QueryKey<Options<GetUserPremiumsData>>, number | Pick<QueryKey<Options<GetUserPremiumsData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<GetUserPremiumsData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    page: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await getUserPremiums({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getUserPremiumsInfiniteQueryKey(options)
    });
};

export const getSessionsQueryKey = (options: Options<GetSessionsData>) => createQueryKey('getSessions', options);

export const getSessionsOptions = (options: Options<GetSessionsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getSessions({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getSessionsQueryKey(options)
    });
};

export const getSessionsInfiniteQueryKey = (options: Options<GetSessionsData>): QueryKey<Options<GetSessionsData>> => createQueryKey('getSessions', options, true);

export const getSessionsInfiniteOptions = (options: Options<GetSessionsData>) => {
    return infiniteQueryOptions<GetSessionsResponse, GetSessionsError, InfiniteData<GetSessionsResponse>, QueryKey<Options<GetSessionsData>>, number | Pick<QueryKey<Options<GetSessionsData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<GetSessionsData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    page: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await getSessions({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getSessionsInfiniteQueryKey(options)
    });
};

export const postSessionQueryKey = (options: Options<PostSessionData>) => createQueryKey('postSession', options);

export const postSessionOptions = (options: Options<PostSessionData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postSession({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postSessionQueryKey(options)
    });
};

export const postSessionMutation = (options?: Partial<Options<PostSessionData>>): UseMutationOptions<unknown, PostSessionError, Options<PostSessionData>> => {
    const mutationOptions: UseMutationOptions<unknown, PostSessionError, Options<PostSessionData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postSession({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getSignedDocumentsQueryKey = (options: Options<GetSignedDocumentsData>) => createQueryKey('getSignedDocuments', options);

export const getSignedDocumentsOptions = (options: Options<GetSignedDocumentsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getSignedDocuments({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getSignedDocumentsQueryKey(options)
    });
};

export const getSignedDocumentsInfiniteQueryKey = (options: Options<GetSignedDocumentsData>): QueryKey<Options<GetSignedDocumentsData>> => createQueryKey('getSignedDocuments', options, true);

export const getSignedDocumentsInfiniteOptions = (options: Options<GetSignedDocumentsData>) => {
    return infiniteQueryOptions<GetSignedDocumentsResponse, GetSignedDocumentsError, InfiniteData<GetSignedDocumentsResponse>, QueryKey<Options<GetSignedDocumentsData>>, number | Pick<QueryKey<Options<GetSignedDocumentsData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<GetSignedDocumentsData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    page: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await getSignedDocuments({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getSignedDocumentsInfiniteQueryKey(options)
    });
};